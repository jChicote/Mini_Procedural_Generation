#pragma kernel CSMain

// Data Array Buffers 
RWStructuredBuffer<float> noise;
RWStructuredBuffer<float2> octaveOffsets;

float3 startPosition;

float noiseScale;
float persistence;
float lacunarity;

float amplitude;
float frequency;
float noiseValue;
float scaleX;
float scaleY;

int mapDimension;
int noiseOctaveCount;

int CalculateRow(uint index) {
    float row = floor(index / mapDimension);
    return int(row);
}

int CalculateColumn(uint index, uint row) {
    return index - row * mapDimension;
}

// -------------------------------------------------------
//                  Perlin Noise Generation
// -------------------------------------------------------

// Examples on Perlin Noise Generation at: https://www.programmersought.com/article/44147523506/
// Examples used are taken from "Compute Shader" section including functions:
// - hash22
// - Perlin

// Example on Noise Gradient by user "iq" at: https://www.shadertoy.com/view/XdXGW8
// Example includes function from lines 38 - 61

float2 Gradient(float2 z) {
    // 2D to 1D  (feel free to replace by some other)
    int n = z.x * z.y;// *11111;

    // Hugo Elias hash (feel free to replace by another one)
    n = (n << 13) ^ n;
    n = (n * (n * n * 15731 + 789221) + 1376312589) >> 16;

    if (n == 0) {
        // simple random vectors
        return float2(cos(float(n)), sin(float(n)));
    }

    // Perlin style vectors
    n &= 7;
    float2 gr = float2(n & 1, n >> 1) * 2.0 - 1.0;
    return (n >= 6) ? float2(0.0, gr.x) :
        (n >= 4) ? float2(gr.x, 0.0) :
        gr;
}

float2 hash22(float2 p) {
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

float PerlinNoise(float2 p) {
    float2 pi = floor(p);
    float2 pf = frac(p);

    float a = Gradient(pi);
    float b = Gradient(pi + float2(1.0, 0.0));
    float c = Gradient(pi + float2(0.0, 1.0));
    float d = Gradient(pi + float2(1.0, 1.0));

    float2 w = pf * pf * (3.0 - 2.0 * pf);

    return lerp(lerp(dot(hash22(pi + float2(0.0, 0.0)), pf - float2(0.0, 0.0)),
                    dot(hash22(pi + float2(1.0, 0.0)), pf - float2(1.0, 0.0)), w.x),
                lerp(dot(hash22(pi + float2(0.0, 1.0)), pf - float2(0.0, 1.0)),
                    dot(hash22(pi + float2(1.0, 1.0)), pf - float2(1.0, 1.0)), w.x), w.y);
}

// -------------------------------------------------------
//                           Main 
// -------------------------------------------------------

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    uint row = CalculateRow(index);
    uint col = CalculateColumn(index, row);
    noiseValue = 0;
    amplitude = 1;
    frequency = 1;

    // loops through each octave providing added detail to result
    for (int i = 0; i < noiseOctaveCount; i++) {
        //Calculates determined position with added offsets and variations
        scaleX = float(col) / noiseScale * frequency + octaveOffsets[i].x + startPosition.x;
        scaleY = float(row) / noiseScale * frequency + octaveOffsets[i].y + startPosition.z;

        noiseValue += PerlinNoise(float2(scaleX, scaleY)) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }

    noise[index] = noiseValue;
}